library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_unsigned.ALL;
use IEEE.STD_LOGIC_arith.ALL;

entity display is
    Port (
        clk, rst : in STD_LOGIC;                   -- Clock and Reset inputs
        data     : out STD_LOGIC_VECTOR (7 downto 0); -- 8-bit output for display data
        sw1      : out STD_LOGIC_VECTOR (3 downto 0)  -- 4-bit output for segment selection
    );
end display;

architecture Behavioral of display is
    signal tmp  : std_logic_vector(23 downto 0);  -- 24-bit counter for slow clock generation
    signal sclk, srst : std_logic;                -- Slow clock and secondary reset signals
    signal sw   : std_logic_vector(1 downto 0);   -- 2-bit state for cycling display patterns
begin

    -- Process to generate a slow clock and manage reset
    process(clk, rst)
    begin
        if clk = '1' and clk'event then
            if rst = '1' then
                tmp  <= x"000000";  -- Reset the counter to zero
                srst <= '1';        -- Set secondary reset signal
                sclk <= '0';        -- Initialize slow clock to 0
            else
                tmp <= tmp + 1;     -- Increment the counter on each clock cycle
                if tmp(23) = '1' then
                    srst <= '0';    -- Clear the secondary reset when tmp reaches a high value
                end if;
                sclk <= tmp(22);    -- Use bit 22 as a slow clock signal
            end if;
        end if;
    end process;

    -- Process for cycling through display data and segment selections
    process(sclk, srst)
    begin
        if sclk = '1' and sclk'event then
            if srst = '1' then
                sw <= "00";  -- Reset sw to "00" when srst is active
            else
                case sw is
                    when "00" =>
                        data <= "11111001";  -- Display pattern 1
                        sw1  <= "1110";      -- Segment selection 1
                    when "01" =>
                        data <= "10100100";  -- Display pattern 2
                        sw1  <= "1101";      -- Segment selection 2
                    when "10" =>
                        data <= "10110000";  -- Display pattern 3
                        sw1  <= "1011";      -- Segment selection 3
                    when "11" =>
                        data <= "11111001";  -- Display pattern 4
                        sw1  <= "0111";      -- Segment selection 4
                    when others =>
                        null;                -- Do nothing in undefined cases
                end case;
                sw <= sw + 1;  -- Increment sw to cycle through patterns
            end if;
        end if;
    end process;

end Behavioral;




Pin Locking:

## Clock and Reset
set_property PACKAGE_PIN W5 [get_ports clk]
set_property PACKAGE_PIN W16 [get_ports rst]
set_property IOSTANDARD LVCMOS33 [get_ports clk]
set_property IOSTANDARD LVCMOS33 [get_ports rst]

## Data Output (8 bits for 7-segment display)
set_property PACKAGE_PIN W7 [get_ports {data[0]}]
set_property PACKAGE_PIN W6 [get_ports {data[1]}]
set_property PACKAGE_PIN U8 [get_ports {data[2]}]
set_property PACKAGE_PIN V8 [get_ports {data[3]}]
set_property PACKAGE_PIN U5 [get_ports {data[4]}]
set_property PACKAGE_PIN V5 [get_ports {data[5]}]
set_property PACKAGE_PIN U7 [get_ports {data[6]}]
set_property PACKAGE_PIN V7 [get_ports {data[7]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data[*]}]

## Segment Selection Output (4 bits)
set_property PACKAGE_PIN W4 [get_ports {sw1[0]}]
set_property PACKAGE_PIN V4 [get_ports {sw1[1]}]
set_property PACKAGE_PIN U4 [get_ports {sw1[2]}]
set_property PACKAGE_PIN U2 [get_ports {sw1[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {sw1[*]}]


